<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>CodingWithWolves</title><description>A description of CodingWithWolves</description><link>https://codingwithwolves.com</link><language>fr</language><lastBuildDate>Sat, 12 Nov 2022 16:42:23 +0100</lastBuildDate><pubDate>Sat, 12 Nov 2022 16:42:23 +0100</pubDate><ttl>250</ttl><atom:link href="https://codingwithwolves.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-12-13-devenir-developpeur-sans-parler-anglais</guid><title>Devenir développeur sans parler anglais</title><description></description><link>https://codingwithwolves.com/posts/2020-12-13-devenir-developpeur-sans-parler-anglais</link><pubDate>Sun, 13 Dec 2020 16:18:00 +0100</pubDate><content:encoded><![CDATA[<p>Pour mon premier article en français, le sujet de l'anglais dans le monde du développement peut paraître ironique pourtant cela reste un sujet sous-estimé par beaucoup, encore aujourd'hui.</p><img src="https://codingwithwolves.com/images/allo.jpg" alt="Non mais allo quoi"/><p><em>(J'avoue ne pas totalement assumer ce meme ...)</em></p><h2>Pourquoi l'anglais c'est important</h2><p>L'anglais reste la langue universelle au niveau mondial et l'informatique n'échappe pas à la règle.</p><h3>La syntaxe des langages informatiques</h3><p>Pour les férus d'histoire on doit la science informatique moderne à Alan Turing, qui était britannique, rien d'étrange donc à ce que la majorité des langages informatiques se basent sur l'anglais.</p><p>Même si l'anglais utilisé dans les langages eux-mêmes est à la portée d'un collégien cela reste une nécessité d'avoir certaines bases en anglais.</p><p>Comprendre à quoi sert un <code>do...while</code> ou encore un <code>try/catch</code> sans comprendre à la signification des termes employés, c'est comme jouer au foot avec une balle crevée, ça se fait mais c'est pas facile.</p><h3>La documentation</h3><p>Là où la maîtrise de l'anglais va devenir nécessaire est la documentation.</p><p>Si vous voulez apprendre un langage, Swift par exemple, la documentation risque d'être votre meilleure amie pour comprendre des notions clés, telles que la différence entre une <code>Struct</code> et une <code>Class</code> par exemple. Je vous laisse deviner qu'Apple ne s'est pas embêté à l'écrire en français...</p><p>De même la plupart des livres, formations, vidéos, vous expliquant comment quelque chose fonctionne en informatique sera en anglais. Vous ne verrez pas <a href="https://github.com/JakeWharton">Jake Wharton</a> écrire la documentation de sa nouvelle libraire Android en français ou <a href="https://www.swiftbysundell.com">John Sundell</a> faire un podcast sur Swift en italien.</p><p>Pour progresser, la maîtrise de l'anglais sera un véritable atout !</p><h3>La communauté</h3><p>Pas celle de l'anneau non, plutôt celle de <a href="https://stackoverflow.com">StackOverflow</a> !</p><p>Si vous rencontrez un problème il y a de très grandes chances que des gens l'aient rencontré avant vous et StackOverflow (SO pour les intimes) sera l'endroit où vous trouverez les réponses à la majorité de vos questions.</p><p>Malheureusement, pour maximiser les chances de résolution, les questions sont en anglais ainsi que les réponses. Très peu d'échanges se font dans d'autres langues.</p><p>Pas évident de coopérer avec autrui si vous ne vous comprenez pas.</p><p>Dès lors pour en profiter il faudra utiliser l'anglais.</p><h3>Vos collègues et votre projet</h3><p>Difficile de ne pas se remémorer le pétage de plomb de Macron à ces mots mais il avait raison.</p><p>Si vous ne devez retenir qu'une seule raison de bosser votre anglais c'est celle-là.</p><p>"Parce que c'est votre projet".</p><p>Au sein d'un projet, vous serez sûrement amener à travailler en équipe.</p><p>Même si vous partagez tous une langue autre que l'anglais, vous pourrez être amenés à l'utiliser pour communiquer, pour la documentation, pour les mails, pour un projet open-source, etc...</p><p>Le souci ?</p><p>Le niveau d'anglais au sein d'une équipe peut être très hétérogène et on se retrouve souvent dans des situations compliquées.</p><p>Prenons quelques exemples :</p><h4>La documentation</h4><p>Partons d'un cas qui m'est déjà arrivé :</p><blockquote><p>Lors d'une refonte de l'intégration continue du projet, le développeur qui s'en est chargé décide de rédiger la documentation sur les nouvelles fonctionnalités en anglais. Manque de bol, il était fan des tournures à rallonge, ce qui a donné des phrases très longues, avec du vocabulaire très technique, d'une complexité pas toujours justifiée. On ne s'est rendu compte du problème que pendant ses vacances, lorsqu'on a du résoudre un souci sur ces fameuses nouvelles fonctionnalités, comme il l'avait rédigé seul, certains choix de terme n'était connu que de lui, on a donc eu beaucoup de mal à comprendre ce qu'il voulait dire.</p></blockquote><p>Le problème que montre cet exemple, outre un souci de process, est que la documentation c'est surtout de la littérature.</p><p>Avant de se lancer dans la rédaction il faut toujours définir en amont les termes utilisés avec toute l'équipe pour que tout le monde soit aligné.</p><p>De même, l'objectif de la documentation est d'être lisible, ici pas de place à l'égo et aux phrases pompeuses pour montrer à quel point on maîtrise la langue de Shakespeare, soyez clair et concis, mais surtout soyez compréhensible.</p><p>Ma recommandation ?</p><p>Si toute votre équipe est francophone et que vous ne projetez pas une ouverture à l'open-source ou à l'international, écrivez votre documentation en français, ça vous évitera pas mal de souci.</p><h4>Le code</h4><p>On touche ici au coeur du débat. C'est ici que le manque de maîtrise de l'anglais sera le plus critique.</p><p>On passe 10 fois plus de temps à lire du code qu'à en écrire (d'après Uncle Bob) alors autant vous dire que quand l'anglais est bancal, la lecture prend du temps.</p><p>Sans même parler d'artisanat du code et donc de bien nommer ses variables/fonctions, difficile de savoir l'utilité d'une variable qui s'appelle <code>freeMonthSubscriptionDuration</code> sans aller voir l'utilisation qui en est faite.</p><p>En revanche une variable appelée <code>freeSusbcriptionDurationInMonth</code> c'est déjà plus parlant.</p><p>Encore une fois mettez-vous d'accord sur les termes employés, la traduction des notions métier. Ce genre de détail peut faire toute la différence.</p><h2>Améliorer son anglais</h2><p>Vous l'aurez compris, pas besoin d'être bilingue pour coder mais une certaine maîtrise facilite grandement la chose.</p><p>Loin de moi l'idée de vous apprendre l'anglais, mais pour ceux qui trainaient au fond de la classe d'anglais au collège tout n'est pas perdu !</p><p>Voici mes petits conseils pour progresser :</p><h3>Netflix</h3><p>On va pas se mentir, le nombre de personne ne regardant pas Netflix doit correspondre à peu de chose près à la population de l'Alaska, il y a donc de grandes chances que vous ayez un abonnement !</p><p>A défaut de pratiquer, Netflix reste un très bon moyen d'améliorer son oreille et son vocabulaire donc pas d'excuse, on regarde ses séries en anglais ! (Les sous-titres sont tolérés à condition qu'ils soient eux aussi en anglais). Vous pouvez donc dire adieu au doublage français, vous me remercierez plus tard.</p><h3>Appareils électroniques</h3><p>Si vous le pouvez mettez vos ordinateurs, smartphones, lisseuses et compagnie en anglais. Plus vous serez immergés dans la langue et plus vous progresserez.</p><p>En cas de difficulté n'hésitez pas à demander à votre ami Google Trad ;)</p><h3>Voyager</h3><p>Le plus sympa, mais pas le plus simple ni le plus économe.</p><p>Mais partir dans un pays étranger ne suffit pas, forcez-vous à entrer en contact avec la population locale. Ils sont souvent ravis d'échanger avec vous.</p><p>Corollaire : Pour les étudiants qui partent en Erasmus, pitié ne restez pas entre français, c'est le meilleur moyen de se tirer une balle dans le pied et de ne pas progresser ...</p><hr><p>Votre niveau d'anglais ne doit pas être une limite, si le développement vous tente, lancez-vous, vous trouverez toujours des gens pour vous aider à progresser !</p><p>Si vous avez des questions ou des remarques n'hésitez pas à me contacter sur <a href="https://twitter.com/YoanSmit">Twitter</a>{:target="<em>blank"} ou <a href="https://www.linkedin.com/in/yoan-smit/">LinkedIn</a>{:target="</em>blank"}, je me ferai un plaisir de vous répondre.</p><p>Cheers.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-10-31-why-i-chose-to-write-in-english</guid><title>Why I chose to write in English</title><description></description><link>https://codingwithwolves.com/posts/2020-10-31-why-i-chose-to-write-in-english</link><pubDate>Sat, 31 Oct 2020 02:45:00 +0100</pubDate><content:encoded><![CDATA[<p>A few weeks ago a friend of mine, Jordan Chapuy, asked me a bunch of questions about this blog. He has been writing on Medium for quite a while now and he wanted to start his own blog (which you can now see <a href="https://jordanchapuy.com">here</a>). He was hesitating about whether he should write in English vs French.</p><p>One of the hardest question he asked me was : "Why do <em>you</em> write in English ?".</p><p>And that was indeed a good question.</p><img src="https://codingwithwolves.com/images/no-clue.jpg" alt="Why do you ask ?"/><h2>The reasons why I launched my blog</h2><p>Looking back, my options were pretty limited. I was going to write either in English or in French (my native language).</p><p>So why did I go with English ?</p><p>When I started I wanted to reach as many people as I could so English was an obvious choice. I am lucky to have a level of English that is good enough to be understandable (and I hope enjoyable for native speakers too !) so I went for it.</p><p>It is also easier because the common language in IT is English. Be it in English or French, a View Controller is a View Controller so it made more sense to stick with English all the way down.</p><p>Last but not least, I truly enjoy writing and speaking in English and I don't really have many opportunities to practice, writing in English is one way for me to hone my skill, or at least not to loose it too quickly.</p><p>Following Jordan's question, we discussed it with <a href="https://pablopernot.fr">Pablo Pernot</a>, a pretty clever guy.</p><p>According to him writing a blog is all about four elements :</p><ul><li>Ego</li><li>Introspection</li><li>Sharing</li><li>Marketing</li></ul><p>And I have to say he is kinda right.</p><p>Using these four elements might provide some ideas regarding the language you should pick if you start writing yourself.</p><h3>Ego</h3><p>For some people having a "yourname.com" online is all they want. They just want to show that what they think is important enough to justify having a blog. It is all about ego.</p><p>Most of all, they want to brag about their achievements.</p><p>But there are a lot of easier ways to get your ego boost other than going through the troubles of launching and maintaining a blog.</p><p>If you are writing for this reason, in my honest opinion, <strong>you are doing it wrong</strong>.</p><h3>Introspection</h3><p>Sometimes you start a blog like you would start a diary or a therapy, just to go through your thoughts and process them.</p><p>Maybe you are questionning a dogma in your field, or expressing the fact that you don't understand a certain concept. You can also be questionning a choice you made, like writing a blog in English.</p><p>To me this is the most personnal kind of blog and it definitely does not suit everyone.</p><h3>Sharing</h3><p>Now we are talking !</p><p>If I had to pick a main reason I started a blog, this would be the one. Each and every one of us has a different life, live different experiences and it is worth sharing !</p><p>It is very likely that the obstacles you tackled in your life have already been tackled by someone and it is also highly probable that someone else will have to tackle them later.</p><p>Sharing your experience is giving them the opportunity to use your solution if it suits their needs or use a differente method if not.</p><p>It is all about giving !</p><h3>Marketing</h3><p>Let's talk a bit about personnal branding. Type your name on Google and see what comes out. <em>This</em> is your brand and it is what makes it easier for you to get a job or a pay raise.</p><p>A lot of people think this is about ego but it is not, it is about what you can bring to others and it is pretty hard for them to see it if you stay hidden in a cave.</p><p>A blog is a really good way of improving your personnal branding, as well as going to meetup or doing some open-source projects for example.</p><h2>Why I chose to write in English ?</h2><p>If you look at the reasons why I started blogging it made sense choosing English over French.</p><p>But my main goal was to share my knowledge and if you focus on that point then I am starting to wonder.</p><p>After all there are already tons of information in English regarding pretty much any subject I could write about. But not that much in French.</p><p>Writing in French would also improve my personnal brand in France, as I do not intend to become an international rockstar so it is not a big deal if only French-speaking people read me.</p><p>Finally it would be far easier for me to make puns in French. Since I want to write articles that you can enjoy I believe jokes, and humor in general help a lot !</p><p>That is why this article is the last one in English for now.</p><hr><p>This is a huge decision for me and I would love to hear your reactions !<br> As usual feel free to reach out to me on <a href="https://twitter.com/YoanSmit">Twitter</a>{:target="<em>blank"} or <a href="https://www.linkedin.com/in/yoan-smit/">LinkedIn</a>{:target="</em>blank"} and to share this article using the little icons just below.</p><p>Cheers.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-08-06-how-to-take-an-interview</guid><title>How to take an interview</title><description></description><link>https://codingwithwolves.com/posts/2020-08-06-how-to-take-an-interview</link><pubDate>Wed, 19 Aug 2020 17:45:00 +0200</pubDate><content:encoded><![CDATA[<p>A few weeks ago I quitted my job, a job I loved but for some reasons I chose to leave it behind and face new challenges like sharing my experience, help junior developers to grow, things like that.</p><p>But the kind of positions where I get to do that is not as easy to find as a developer-only role.</p><p>I had to prepare and this is what I learnt from this process.</p><img src="https://codingwithwolves.com/images/interview.jpg" alt="Is this interview ready for me ?"/><h2>Finding the right job</h2><p>That might sound stupid but take your time choosing the right job in the right company for you.</p><p>I will not lie, it is highly possible that you first job will suck.</p><h3>Why ?</h3><p>You may read a lot of stuff, hear a lot of stuff but before YOU do it yourself you know nothing.</p><p>Let me give you an example, after graduation I took a web development job at a company that I supposed was great after googling it.</p><p>It turned out that I sat at my desk all day long, looking at my screen, producing code like a robot.</p><p>Not that it was a bad thing in itself, some people love just coding like there is no tomorrow and that is alright, I was hired to do just that in the first place.</p><p>But to me this was hell on earth, even worse than watching the whole Twilight saga.</p><h3>This was not what I wanted to do</h3><p>Before taking this job, I thought that coding for the sake of coding would suit me. Just looking at my screen, not having to sit down around a table for an hour to take decision with ten other people. A care-free life.</p><p>Instead I found that I loved contributing to the product I am developing, giving technical advice to the product team, guiding junior developers.</p><p>I did not take the time to ask myself what I wanted to do and it took me almost a year figuring it out.</p><p>I highly recommend you to take that time. It is worth it on the long run.</p><p>Once you know where you are heading, send a bunch of CV, then you are up to face the first challenge.</p><h2>The HR interview</h2><p>Usually this is the first interview you take when applying for a job.</p><p>A lot of people make the mistake to overlook this step but it is as crucial as the technical interview.</p><p>To prepare for this, this is what you should do.</p><h3>Know the company</h3><p>It is kind of obvious to most but some people do not even look up the company on Google or LinkedIn.</p><p>If you are in the mobile industry, download their app, you are going to work on it eventually, might as well be familiar with it right now.</p><p>Find any question you may have for the interviewer. The more questions the better.</p><p>It is always a good sign for an employer to see that the candidate is interested in the company and the product.</p><p>Also if your questions are specific it will show the interviewer you know what you are talking about.</p><p>There is only one crucial point, <strong>do it genuinely</strong>.</p><p>If you fake your interest it will backfire on you.</p><h3>Know the interviewer</h3><p>This can also apply to technical interview but knowing who you are taking to can be the difference between failure and success.</p><p>I am not asking you to stalk the Instagram account of the person, let's not be creepy here, but at the very least his/her LinkedIn account to see if you have any shared interests, contact, school, anything.</p><p>The goal behind this is to be able to connect with the other person and not just be another candidate.</p><p>Once again, authenticity is the key, speak about any common points only if it seems natural in the conversation.</p><h2>The technical interview</h2><p>The long-awaited trial.</p><p>If you made it this far congrats, you passed the first stage.</p><p>How to prepare for a technical interview could (and will) be the subject of a whole other article but in short :</p><h3>Know your basics</h3><p>There are questions you are sure to be asked no matter your experience, for example in Swift it could be the difference between a Struct and a Class.</p><p>You have to master the basics of your field, if not you are sure to be disqualified from the get-go.</p><p>There are a lot of materials you can find on the Internet to train yourself on this.</p><h3>Be prepared for anything</h3><p>There are as many technical interviews as there are interviewers.</p><p>Some will only discuss things with you, others will simply follow a MCQ. In between you will find algorithms exercises or even live coding.</p><p>If you know the process you can prepare specifically for the kind you will take but if you don't, be prepared to tackle any test.</p><p>My advice for this one is <strong>to take as many interviews as you can</strong>, even when you are not particularly motivated for the job, you will gain experience and that is priceless.</p><p>This will allow you to be more confident when you take the technical interview for your dream job.</p><h2>The next step</h2><p>Usually if everything went according to plan the next step will be meeting some folks you will working with or even your future boss to talk about money, which is just another battle for you to fight.</p><ul><li>- -</li></ul><p>This might sound like a quest to you but that is what it is. My last advice : enjoy the process, the more you enjoy it the easier it will be.</p><p>I hope it will help you in your journey of finding the job you want.</p><p>As usual feel free to reach out to me on <a href="https://twitter.com/YoanSmit">Twitter</a>{:target="<em>blank"} or <a href="https://www.linkedin.com/in/yoan-smit/">LinkedIn</a>{:target="</em>blank"}.</p><p>Cheers.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-07-20-why-you-should-go-freelance</guid><title>Why you should go freelance</title><description></description><link>https://codingwithwolves.com/posts/2020-07-20-why-you-should-go-freelance</link><pubDate>Mon, 20 Jul 2020 10:23:00 +0200</pubDate><content:encoded><![CDATA[<p>I have been in the IT industry for more than five years now as a mobile developer working mostly for a service-based company.</p><p>When I tell people about my job I often get asked the following question : "Why don't you go freelance ? You would make a ton of money !".</p><img src="https://codingwithwolves.com/images/doubt.jpg" alt="You think so ? Then think again"/><p>And that is a legitimate question !</p><p>But before talking about whether you should go freelance or not let's see what other options you have.</p><p><em>NB : What follows is especially true in France, feel free to throw tomatoes at me if it is not accurate for your country</em></p><h3>Employee</h3><p>That is the most common choice.</p><p>One of the main pros of being employed is that when you were hired, you agreed on a salary with your employer, this salary is guaranteed for as long as you are employed and can only increase (in a given context). This way you will never worry about how much you will make the next month, you already know how much. The only thing you should worry about is not getting fired (if you like your job, of course).</p><p>When being employed you also have the joy of being paid even when you do not work, that is called <em>paid holidays</em>. How much you get is up to the industry you are in. The downside of it is that your employer (or at least your manager) has to accept your vacation, you do not get to decide when you can leave, it might be frustrating.</p><p>Talking about frustration, no matter how hard you work, effort does not equal money. You are paid to do a job, should you work ten hours a day to do it or three, in the end you will earn the same amount of money (but then it raises the question of your efficiency).</p><h3>Employer</h3><p>This time you are the one employing others. You can launch your startup or your garage it does not matter, you are the boss.</p><p>The main thing about being the boss is that YOU own the business, and that means several things.</p><p>You will not have to work with that colleague who is getting on your nerves everyday, you choose who to work with, that can make a huge difference on a daily basis. But that also means you have to look for the right people, interview them, be sure that they are the ones you need. That can be a lot of work, at least in the beginning if you handle it yourself.</p><p>You are also the one who is telling where the company is going. You believe that the future of mobile development is Flutter ? Go for it ! Of course this is where the people you hired will shine, telling you what they think about this plan, it is then up to you to listen to them.</p><p>And of course, money, because this is what most entrepreneurs are after. Just like managing people, managing money can be really hard but it is a required skill to be a successful business owner.</p><p>Owning a company is a dream for many people but do not forget that you will do extra hours, be under a lot of stress, but in the end whether it is a success or not depends on you.</p><h3>Freelancer</h3><p>This is it at last ! I will try to be more specific on this one. Being freelancer means you are self-employed, your employee and employer at the same time. But in the meantime you have different pros and cons from the other two. First you have to be legally a freelancer, that means filling a lot of paperwork, crossing your fingers you did not forget anything. Once it is official you have to find a place to work, not every company are inclined to hire a freelancer and you will probably be in competition with service-based companies, companies that work for other companies, so if you just started as a freelancer, expect some hardship. Then there is the question of money. That is the main reason people choose to go down that road. Once again it will depend on the company you work for.<br> For those you do not know how a freelancer is paid, at least in the French IT industry, upon the signature of the contract, you and the one who hires you agree on how much you will be paid per day. Do not forget about the taxes, but your salary will still outperform the income you get as an employee. <em>Dude, why don't everyone go freelance then ?!</em> Because it is not that simple. When you are an employee all you need to be good at is your job but when you are a freelancer it is a lot more complicated ! Firstly you are not assured to earn money every month, if the task you were hired for is done you have to look for a new position and that can take time. Secondly, you need to be good at your job obviously to be recruited but you also need to be a marketer to find job opportunity, a salesperson to actually be hired, a accountant to keep track of your money, a HR manager to keep in touch with everyone you worked with and more. To be a good freelancer, think of yourself as a swiss knife (you know, MacGyver's best friend). You also have to manage your health care and you can forget about paid holidays because no work = no money. Short story long, yes you will earn a lot more if you look at employee vs freelancer, but just like employee vs employer, the job is entirely different, it is not only a question of money. Just weight the pros and cons and see what is best for yourself. --- I would love to hear about you if you choose to be a freelancer and what were you reasons !<br> As usual feel free to reach out to me on <a href="https://twitter.com/YoanSmit">Twitter</a>{:target="<em>blank"} or <a href="https://www.linkedin.com/in/yoan-smit/">LinkedIn</a>{:target="</em>blank"}.</p><p>Cheers.<br></p>]]></content:encoded></item><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-06-19-how-to-slay-your-objectives</guid><title>How to slay your objectives</title><description></description><link>https://codingwithwolves.com/posts/2020-06-19-how-to-slay-your-objectives</link><pubDate>Tue, 23 Jun 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>Setting new goals is important, for your personal life and your professional life, it is what makes you better everyday.</p><p>I have had a lot of goals in my life, some quite small and easy like "Not to go to fast food three times a week" (and it was not <em>that</em> easy) and some that were pretty challenging like "Waking up earlier and go to the gym".</p><p>If you are like me, the kind to drop your New Year's resolution within a week, you won't be surprised if I tell you that I did not achieve the former two goals (though my diet improved a lot !) …</p><p>And yet over time I realized I could achieve some hard goals but still dropping easier ones.</p><p><em>If the difficulty of the goal is not what makes it easy to meet then what is ?</em></p><img src="https://codingwithwolves.com/images/smart.jpg" alt="It is easy, be SMART"/><h2>Set a SMART goal</h2><p>It stands for Specific, Measurable, Achievable, Realistic and Time-boxed.</p><p>Let's see what it means with two examples :</p><ul><li>Losing weight, which is a pretty common objective.</li></ul><ul><li>And being a better developer, after all this blog is about IT, might as well talk about it.</li></ul><h3>Specific</h3><p>Your goal should be crystal clear.</p><ul><li>You want to lose weight ? Too vague. Think about a way to lose weight. Work out more often or improve your diet.</li></ul><ul><li>You want to be a better developer ? Too vague. Again : be more specific. Work some katas, read blog articles (like <a href="{%  post_url  2020-06-09-what-it-means-to-be-a-developer %}">my previous article</a>).</li></ul><h3>Measurable</h3><p>Here is the perfect example to work on your KPIs, which I will discuss a bit further.</p><p>You want to know how close you are to your goal.</p><ul><li>How much weight do you want to lose per week or month ?</li></ul><ul><li>How many katas do you want to do ? How many articles/books do you want to read or even how long do you want to read each week ?</li></ul><p>Having milestones along your way is a good habit to stay motivated. Break your goal into smaller steps that you will do repeatedly.</p><h3>Achievable</h3><p>Often to achieve a goal you have some requirements. Be sure that all these requirements are met beforehand else your goal is doomed to be impossible.</p><ul><li>Losing weight when you are not the one responsible for what you eat or don't have access to a gym is quite difficult.</li></ul><ul><li>It's hard to be a better developer when you don't have access to a computer.</li></ul><h3>Realistic</h3><p>Set a goal for yourself that is within your reach although a challenging one is often a good idea, a goal that is to easy to achieve will undermine your motivation and how rewarding it will be when accomplished.</p><ul><li>Running a marathon when you can't breathe after a five-kilometer run might be too challenging for now.</li></ul><ul><li>Working as a developer when you don't have any experience with coding is not realistic, start with building your coding skills.</li></ul><h3>Time-bound</h3><p>One crucial aspect of a goal that is often left aside is that you <strong>must</strong> have a time limit.</p><p>Without this you will likely be less motivated to work on your goal.</p><ul><li>Lose ten kilograms within the next six months</li></ul><ul><li>Watch all videos from a conference within the next three months</li></ul><p><em>Yeah I already know all that, you are not the first one to Google "How to achieve my goals", don't you have any specific advice ?</em></p><p>Actually I do !</p><p>Following the SMART pattern is really helpful, another thing that is useful is to iterate over your goal.</p><p>Every given amount of time, like every two weeks, think about your goal and ask yourself if it is still relevant, if the way your measure your achievement is right.</p><p>Do not be afraid to be too optimistic, split it into smaller goals.</p><h2>KPIs to know how good you are, or not</h2><p>KPI, or Key Performance Indicator, is a metric you follow to know how good you are performing.</p><h3>It is a metric …</h3><p>KPIs are something impartial, it either go up or go down.</p><p>They can be quite challenging to find depending of your goal.</p><p>You must at least find one or else you will not know how close you are to your goal but three is a good number to go.</p><p>If I used the previous examples it could be :</p><ul><li>Losing weight : The lost weight obviously but sometimes even if you followed your plan your weight will not budge. This is where other KPIs are useful like how long you worked out or how much calories you ingested during a day, they are essential to keep you motivated.</li></ul><ul><li>Better developer : Trickier as they are no obvious KPI that proves that you improved. It might be how many articles you read each day or many videos you watched.</li></ul><h3>… you need to follow</h3><p>That means that whatever your KPIs are, they are only useful over a period of time. A specific value for your KPI does not mean much, what matters is the evolution of your KPI.</p><p>It is important that you keep track of your KPI, by using a spreadsheet for example, you could easily transform it to a graph.</p><p>Visualizing your goal is the best way to achieve it !</p><h3>Be careful of vanity</h3><p>When talking about KPI, you should be warned against what is called <em>vanity metrics</em>.</p><p>These are metrics that look great on paper but do not make a lot of sense regarding your real goal.</p><p>Let's take another example. You launched your tech blog some time ago and you wish to know how well it does. One common idea is to check the number of visit. It sounds like a good idea, I mean, obviously if a lot of people come to your blog then that must mean it is great, right ?</p><p><em>Think about it.</em></p><p>If your goal is to attract as many people as you can then indeed that is a good KPI but if your goal is to make a useful blog, one you can be proud of then do you think it is still that good of an idea ?</p><p>To know if people are interested in your blog you could instead check the session time, the <a href="https://en.wikipedia.org/wiki/Bounce_rate">rebound rate</a>{:target="_blank"} or if they returned to your blog.</p><hr><p>I hope you enjoyed this article and that it will help you dealing with your everyday goals and with your next New Year's resolution.</p><p>If you like it and would like more details feel free to reach out to me on <a href="https://twitter.com/YoanSmit">Twitter</a>{:target="<em>blank"} or <a href="https://www.linkedin.com/in/yoan-smit/">LinkedIn</a>{:target="</em>blank"}.</p><p>Cheers.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-06-09-what-it-means-to-be-a-developer</guid><title>What it means to be a developer</title><description></description><link>https://codingwithwolves.com/posts/2020-06-09-what-it-means-to-be-a-developer</link><pubDate>Tue, 9 Jun 2020 07:41:00 +0200</pubDate><content:encoded><![CDATA[<p>I remember when I was a kid I pictured developers as one beardy big guy with glasses, barely sleeping, hacking the FBI with his laptop and being only interested in computer science.</p><p>While it might be true that many developers wear glasses, after spending so much time in front of a screen I would say it is normal, nowadays this picture could not be further from the truth.</p><p>Being a developer is less about how you look and more about how you think.</p><h1>What is a developer then ?</h1><p>What follows is only my point of view of what being a developer means, it defines in no way what you <em>should</em> be in order to qualify yourself as a developer.</p><h3>A superhero of solving problems</h3><p>I like to think of developers as problem-solvers. What is programming if not solving a problem ?</p><p>Be it fixing a bug, implementing a new feature or even automating a task, they are all an issue to someone that you are trying to solve.</p><p>Most people will be amazed by something as simple as analyzing the issue, finding the cause and then fixing it when for developers it is often just a puzzle game, or like a riddle waiting to be solved.</p><p>Considering solving an issue (i.e. coding) as a game is what, I think, prevents developers from going crazy by the end of the day.</p><h3>A SpongeBob without the SquarePants</h3><p>The IT industry is always evolving, so being a developer means being able to absorb a huge amount of information.</p><p>But just like a SpongeBob the amount of information you can deal with is not limitless, you have to be able to tell wether or not a piece of knowledge will be useful to you. To a junior developer how to deploy your microservice on Docker will not be as beneficial as it can be to a software architect for example.</p><p><em>I don't care about wearing a cape or being friend with a starfish, just tell me how to improve !</em></p><p>If you did not get the reference I feel sorry for you but here are my tips if you want to be a better developer.</p><h1>On the way to becoming a rockstar</h1><p>These are the things I do to get better at developing, there are obviously a lot of other things to do and even these tips will not work for everyone, just pick what works for you.</p><h3>Be curious</h3><p>I already said it but the IT industry is evolving every minutes, that is what I think is fascinating, you will never be bored ! But it also means that you can be outdated rather quickly, the solution to this is easy :</p><p><strong>Be a 5 year-old child</strong></p><p>It is not obvious to you ? Let me explain : when you are child you have this ability to question everything, you want to know the whys and the hows of everything around you. You want to have the same kind of mindset when doing a technological watch.</p><h3>Learn the basics</h3><p>One of the best things I learn while working is software craftmanship.</p><p>It is hardly ever teach at school and yet I consider it a basic for any developer. Check concepts like Clean Code, Extreme Programming, some guys (Robert Martin or Kent Beck, not some <em>random</em> guys, trust me) already faced the issues you are facing or will face in a near future, learn from them, it will be the foundation on which you will build your technological knowledge.</p><h3>Find your jedi master</h3><p>An easy way to improve is to find a mentor, just like copying art is a way to master it, copying a mentor, his or her coding style, way of thinking, is a faster way to master coding than reading some random guy's blog.</p><p>But this is a tricky advice because it can be a double-edged sword, it all depends on how good your mentor is.</p><p>He or she can be master Yoda and teach you how to raise spaceships from some swamps or he or she can be Darth Vader and teach you nothing except that he is your father.</p><p><em>Ok but then how do I find my master Yoda ?</em></p><p>Usually what I do is Google him or her, it is silly but if he or she is a ghost on the Internet you might wonder if he or she is qualified to be your mentor, it does not mean much but if instead you find that he or she speaks to meetups, has a blog or is active on Github you will be able to tell whether he or she is good or not by looking at what Google gave you.</p><p>Most of the time the team I work with is the most crucial factor when choosing a project or a new job.</p><hr><p>There is a lot you can do to keep improving and it does not concern junior developers only.</p><p>How about you, what is your strategy ? I would love it if you shared it with me on Twitter or LinkedIn.</p><p>Cheers.</p><p>PS : If you are looking for some materials <a href="https://martinfowler.com">Martin Fowler's blog</a>{:target="<em>blank"} or <a href="https://blog.cleancoder.com">Robert C. Martin's blog</a>{:target="</em>blank"} (even if this one lacks user experience) are must read !</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-05-30-why-you-should-build-your-own-app</guid><title>Why you should build your own app</title><description></description><link>https://codingwithwolves.com/posts/2020-05-30-why-you-should-build-your-own-app</link><pubDate>Sat, 30 May 2020 13:30:00 +0200</pubDate><content:encoded><![CDATA[<p>When you start coding without a frame usually what you do is messy, I mean no product road map, your user interface looks like Windows 95 and you might even be coding without any versioning tool because well, you don't give a damn about all this.</p><p>When you start coding for a company with a more-or-less organized team these won't do. Usually your product owner will give you the product priorities, a designer will handle the graphic parts and except if you start from scratch the development environment will be already set up. In other words each person is responsible for a specific part of the project.</p><h2>Here come the troubles</h2><img src="https://codingwithwolves.com/images/strength.jpeg" alt="Oh Lord give me strength"/><p>As the product grows you encounter issues we all faced : the product need is not well specified and you have to redo your development several times. The UI designer did not specified which color you should use for a given element and you have to get up and go all the way to his desk to ask him to do his job. Trust me, the list still goes on for quite a bit.</p><p><em>Okay but where are you going with all this ?</em></p><p>It is easy to criticize other's work when you don't get what they are doing. How many times did I hear "you just need to ..." <em>(fill in with your favorite stereotyped sentence)</em> from a product owner about a feature ? The issue is the same : <strong>a lack of knowledge</strong>.</p><p>You can't expect someone to try to understand your work and the obstacles you have to tackle when you are not ready to do it yourself.</p><h3>The solution ? Be in their shoes !</h3><p>The idea is to try to do their work to see what their obstacles are. The best way to do this is to build a whole app all by yourself using a real process.</p><p>What you will learn by doing this :</p><ul><li>Planning a road map</li><li>See how difficult it is to think about all the use cases</li><li>Learning the user experience basics</li><li>Thinking about user interface consistency</li><li>Setting up a project</li><li>Shipping an app to production</li><li>... and more</li></ul><p>I won't go into the details but I really recommend doing all these things by yourself just to see how difficult each part of a project can be. I can tell you that after that instead of complaining about your colleagues you will be willing to help them ! And the best part is that you will learn a lot in the process, even about your own work, think about how valuable it can be for a junior developer to learn how to ship an app.</p><p>(How I did my own app will be covered in depth in a next article)</p><h3>What if I don't have any idea for an app ?</h3><p>It doesn't have to be a ground breaking app. If you really don't have a clue, ask yourself what you need, what you lack and do it yourself ! Still nothing ? Ask your friends, your family, there is always someone with a need waiting to be fulfilled.</p><p>It might take a while to have something to push to the AppStore but you will learn a lot in the process.</p><p>You don't have to worry about your app being successful or even being useful at all, of course the most used the better, or not.</p><h2>My app is on the AppStore, now what ?</h2><p>Now is the time to think about what you want your product to be. Did you have a version 2, a version 3 ? Do people use it a lot ? Do you want to keep developing it ?</p><p>Depending on your answers what follows might not apply to you but my advice ?</p><p><strong>Let it die</strong>.</p><p>Why ? Simple, if your app is not a great success, well what is the point of investing your time in it ? If it is a success what will surely happen is that users will ask for more and more new features, or bug fixes, or even a new app. You will have to put more time and effort in your product, and if your app is a paid one the pressure on your shoulders will be even greater to make it worth it.</p><p>Remember that I made the assumption that you are doing this while working, if in your case time and energy are not an issue, keep working on your app as much as you want !</p><h3>Now that I have decided to slay my poor app, what are the options ?</h3><p>You can just leave it on the AppStore to die eventually or you can totally remove it from the store, maybe open-source it ? Personally I prefer removing it from the AppStore entirely, you don't want a buggy app, or one that is not up to date, related to your name.</p><p>The idea behind it is keeping the value of what you learned without the burden of maintainance. By open-sourcing it you can still access it, link to it on your LinkedIn and improve your personal branding, given the code you produced is not something you are ashamed of.</p><p>Cheers.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://codingwithwolves.com/posts/2020-05-29-welcome-to-coding-with-wolves</guid><title>Welcome to Coding with wolves!</title><description></description><link>https://codingwithwolves.com/posts/2020-05-29-welcome-to-coding-with-wolves</link><pubDate>Fri, 29 May 2020 13:30:00 +0200</pubDate><content:encoded><![CDATA[<p>Hi everyone !</p><p>I have been wondering a while about whether I should start a blog or not.</p><p><code>Is what I know worth sharing ?</code> or even</p><p><code>Will it be interesting enough ?</code> is something that might sound familiar to you if you ever thought about starting a blog too.</p><p>After a lot of thinking I finally decided to go for it.</p><p>Though I specialized in Swift I will try to give some personal feedback about coding in general, not only about Swift.</p><p>Hope you will find what you were looking for by reading this blog.</p><p>And if you ever want to get in touch, feel free to do so on social media, you can find my info in the footer of this blog.</p><p>Cheers.</p>]]></content:encoded></item></channel></rss>